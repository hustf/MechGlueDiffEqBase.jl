        - using Test
        - using MechGlueDiffEqBase
        - using MechanicalUnits: @import_expand, dimension, NoDims
        - @import_expand(N, s, m)
        - using DifferentialEquations
        - @testset "ODE" begin
       37     f = (y, p, t) -> 0.5y / 3.0  # The derivative, yeah
        1     u0 = 1.5
        2     @test zero(u0) == 0 * u0
        2     @test value(u0) == 1.5
        1     tspan = (0.0, 1.0)
        1     prob = ODEProblem(f, u0, tspan)
        1     integrator = DiffEqBase.__init(prob, Tsit5(), dt = 0.1)
        -     # Internalnorm's range should be dimensionless
        1     internalnorm = integrator.opts.internalnorm
        2     @test dimension(internalnorm(u0, tspan[1])) == NoDims
        1     sol = solve(prob, Tsit5(), dt = 0.1)
        2     @test sol(0.0) == u0
        2     @test sol(1.0) ≈ 1.7720406
        1     @time solve(prob, Tsit5()) # 23 alloc, 4797 KiB
        - end
        - @testset "ODE quantity" begin
       97     f = (y, p, t) -> 0.5y / 3.0s  # The derivative, yeah
        1     u0 = 1.5N
        2     @test zero(u0) == 0 * u0
        2     @test value(u0) == 1.5
        1     tspan = (0.0s, 1.0s)
        1     prob = ODEProblem(f, u0, tspan)
        1     integrator = DiffEqBase.__init(prob, Tsit5(), dt = 0.1s)
        -     # Internalnorm's range should be dimensionless
        1     internalnorm = integrator.opts.internalnorm
        2     @test dimension(internalnorm(u0, tspan[1])) == NoDims
        1     sol = solve(prob, Tsit5(), dt = 0.1s)
        2     @test sol(0.0s) == u0
        2     @test sol(1.0s) ≈ 1.7720406N
        1     @time solve(prob, Tsit5()) # 29 alloc, 5641KiB
        - end
        - 
        - @testset "ODE quantity algorithms" begin
       97     f = (y, p, t) -> 0.5y / 3.0s  # The derivative, yeah
        1     u0 = 1.5N
        2     @test zero(u0) == 0 * u0
        2     @test value(u0) == 1.5
        1     tspan = (0.0s, 1.0s)
        1     prob = ODEProblem(f, u0, tspan)
        1     integrator = DiffEqBase.__init(prob, Tsit5(), dt = 0.1s)
        -     # Internalnorm's range should be dimensionless
        1     internalnorm = integrator.opts.internalnorm
        2     @test dimension(internalnorm(u0, tspan[1])) == NoDims
        1     sol = solve(prob, Tsit5(), dt = 0.1s)
        2     @test sol(0.0s) == u0
        2     @test sol(1.0s) ≈ 1.7720406N
        1     @time solve(prob, Tsit5()) # 29 alloc, 5641KiB
        - end
