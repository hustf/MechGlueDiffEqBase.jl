        - # Norm, ABS2 zero for ArrayPartions and 'mixed matrices'.
        - 
        - using Test
        - using MechGlueDiffEqBase
        - using MechanicalUnits: @import_expand, ∙
        - using BenchmarkTools # temp
        - @import_expand(cm, mm, kg, s)
        - ######################################################
        - # D ABS2, zero
        - # Similar to test_004, but with new argument structure
        - ######################################################
        - @testset "Extended UNITLESS_ABS2, selected argument structures " begin
        7     Vn6a = [1131.34, -2282.343, 6672.423, -5.64305, 4.30333, 2.42879]
        1     Vn6 = convert_to_mixed(Vn6a)
        1     Vu6ac = Vn6a∙kg
        1     Vu6c = convert_to_mixed(Vu6ac)
        2     Vu6 = convert_to_mixed(Vn6.*[kg, cm, s, mm, kg/kg, 1])
        2     Vu6r = convert_to_mixed(Vn6.* reverse([kg, cm, s, mm, kg/kg, 1]))
        4     Vn4a = [1, 3, 5, 7]
        1     Vn4 = convert_to_mixed(Vn4a)
        1     Vu4 = Vn4a∙kg
        1     Mn2a = [1 3; 5 7]
        1     Mn2 = convert_to_mixed(Mn2a)
        1     Mu2a = [1kg 3; 5 7cm]
        1     Mu2 = convert_to_mixed(Mu2a)
        1     normval = 5.101030471786125e7
        0     @testset "Correctness " begin
        3         for v in (Vn6a, Vn6, Vu6ac, Vu6c, Vu6, Vu6r)
        6             @test UNITLESS_ABS2(v) === normval
        6         end
        1         for v in (Vn4a, Vn4, Vu4, Mn2a, Mn2, Mu2a, Mu2)
        -             #println(v)
        7             @test UNITLESS_ABS2(v) === 84
        7         end
        -     end
        0     @testset "Inferrability" begin
        3         for v in (Vn6a, Vn6, Vu6ac, Vu6c, Vu6, Vu6r, Vn4a, Vn4, Vu4, Mn2a, Mn2, Mu2a, Mu2)
       24             if v isa Vector{<:Quantity} ||
        -                 v isa ArrayPartition{<:Quantity} ||
        -                 v isa ArrayPartition{<:Real} ||
        -                 v isa Matrix{Int64} ||
        -                 v isa Matrix{Quantity{Int64}}
        -                     #println("inferred ", typeof(v) )
        -                     #println(v)
       11                     @test @inferred(UNITLESS_ABS2(v)) isa Real
        -                     #println()
        -             else
        -                 #println("v = ", v)
        -                 #println(typeof(v), "\t\t", Base.return_types(UNITLESS_ABS2, (typeof(v),))[1])
        -                 #println()
        2                 @test true
        -             end
       13         end
        -     end
        - end
        - ####################
        - # E ODE_DEFAULT_NORM
        - ####################
        - @testset "Extended ODE_DEFAULT_NORM, selected argument structures " begin
        7     Vn6a = [1131.34, -2282.343, 6672.423, -5.64305, 4.30333, 2.42879]
        1     Vn6 = convert_to_mixed(Vn6a)
        1     Vu6ac = Vn6a∙kg
        1     Vu6c = convert_to_mixed(Vu6ac)
        2     Vu6 = convert_to_mixed(Vn6.*[kg, cm, s, mm, kg/kg, 1])
        2     Vu6r = convert_to_mixed(Vn6.* reverse([kg, cm, s, mm, kg/kg, 1]))
        4     Vn4a = [5, 5, 5, 5]
        1     Vn4 = convert_to_mixed(Vn4a)
        1     Vu4 = Vn4a∙kg
        1     Mn2a = [5 5; 5 5]
        1     Mn2 = convert_to_mixed(Mn2a)
        1     Mu2a = [5kg 5; 5 5cm]
        1     Mu2 = convert_to_mixed(Mu2a)
        1     normval = 2915.770473301504
        0     @testset "Correctness " begin
        3         for v in (Vn6a, Vn6, Vu6ac, Vu6c, Vu6, Vu6r)
        6             @test ODE_DEFAULT_NORM(v, 0) === normval
        6         end
        1         for v in (Vn4a, Vn4, Vu4, Mn2a, Mn2, Mu2a, Mu2)
        7             @test ODE_DEFAULT_NORM(v, 0) === 5.0
        7         end
        -     end
        0     @testset "Inferrability" begin
        3         for v in (Vn6a, Vn6, Vu6ac, Vu6c, Vu6, Vu6r, Vn4a, Vn4, Vu4, Mn2a, Mn2, Mu2a, Mu2)
       24             if v isa Vector{<:Quantity} ||
        -                 v isa ArrayPartition{<:Quantity} ||
        -                 v isa ArrayPartition{<:Real} ||
        -                 v isa Matrix{Int64} ||
        -                 v isa Matrix{Quantity{Int64}} ||
        -                 v isa Vector{Float64}
       12                     @test @inferred(ODE_DEFAULT_NORM(v, 0)) isa Real
        -             else
        1                 @test true
        -             end
       13         end
        -     end
        - end
        - 
        - nothing
